package ca.jrvs.apps.trading.service;

import ca.jrvs.apps.trading.dao.AccountDao;
import ca.jrvs.apps.trading.dao.PositionDao;
import ca.jrvs.apps.trading.dao.SecurityOrderDao;

import ca.jrvs.apps.trading.dao.TraderDao;
import ca.jrvs.apps.trading.model.domain.Account;
import ca.jrvs.apps.trading.model.domain.Position;
import ca.jrvs.apps.trading.model.domain.SecurityOrder;
import ca.jrvs.apps.trading.model.domain.Trader;
import ca.jrvs.apps.trading.model.view.TraderAccountView;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class TraderAccountService {

    private TraderDao traderDao;
    private AccountDao accountDao;
    private PositionDao positionDao;
    private SecurityOrderDao securityOrderDao;

    @Autowired
    public TraderAccountService(TraderDao traderDao, AccountDao accountDao,
                                PositionDao positionDao, SecurityOrderDao securityOrderDao) {
        this.traderDao = traderDao;
        this.accountDao = accountDao;
        this.positionDao = positionDao;
        this.securityOrderDao = securityOrderDao;
    }

    /**
     * Create a new trader and initialize a new account with 0 amount.
     *
     * @param trader cannot be null. All fields cannot be null except for id (auto generated by db)
     * @return traderAccountView
     * @throws IllegalArgumentException if a trader has null fields or id is null
     */
    public TraderAccountView createTraderAndAccount(Trader trader) {
        if (trader.getFirstName() == null || trader.getLastName() == null || trader.getDob() == null ||
                trader.getCountry() == null || trader.getEmail() == null) {
            throw new IllegalArgumentException("Trader cannot have null fields");
        }
        Trader savedTrader = traderDao.save(trader);

        Account account = new Account();
        account.setTraderId(trader.getID());
        account.setAmount(0.0);
        Account savedAccount = accountDao.save(account);

        return new TraderAccountView(savedTrader, savedAccount);
    }

    /**
     * A trader can be deleted iff it has no open position and 0 cash balance
     *
     * @param traderId must not be null
     * @throws IllegalArgumentException if traderId is null or not found or unable to delete
     */
    public void deleteTraderById(Integer traderId) {
        if (traderId == null) {
            throw new IllegalArgumentException("traderId cannot be null!");
        }
        if (!traderDao.existsById(traderId)) {
            throw new IllegalArgumentException("traderId does not exist!");
        }
        Account traderAccount = accountDao.findById(traderId).get();
        if (traderAccount.getAmount() > 0) {
            throw new IllegalArgumentException("Trader account balance is not 0");
        }

        List<Position> positions = positionDao.findAllByAccountId(traderAccount.getID());
        if (positions.size() > 0) {
            throw new IllegalArgumentException("Trader with id "+ traderId + "has open positions");
        }
        List<SecurityOrder> securityOrders = securityOrderDao.findAllByAccountId(traderAccount.getID());
        securityOrders.forEach(order -> securityOrderDao.deleteById(order.getID()));
        accountDao.deleteById(traderAccount.getID());
        traderDao.deleteById(traderId);
    }

    /**
     * Deposit a fund to an account by traderId
     *
     * @param traderId must not be null
     * @param fund must be greater than 0
     * @return updated Account
     * @throws IllegalArgumentException if traderId is null or not found, and fund is less than or equal to 0
     */
    public Account deposit(Integer traderId, Double fund) {
        if (traderId == null) {
            throw new IllegalArgumentException("Trader id cannot be null");
        }
        if (!traderDao.existsById(traderId)) {
            throw new IllegalArgumentException("Trader id " + traderId + "does not exist");
        }
        if (fund <= 0) {
            throw new IllegalArgumentException("Fund amount to be deposited must be greater than 0");
        }

        Account traderAccount = accountDao.findByTraderId(traderId).get();
        traderAccount.setAmount(traderAccount.getAmount() + fund);
        accountDao.updateOne(traderAccount);

        return accountDao.save(traderAccount);
    }

    /**
     * Withdraw a fund to an account by traderId
     *
     * @param traderId trader ID
     * @param fund amount cannot be 0
     * @return updated Account
     * @throws IllegalArgumentException if traderId is null or not found, and fund is less than or equal to 0
     */
    public Account withdraw(Integer traderId, Double fund) {
        if (traderId == null) {
            throw new IllegalArgumentException("Trader id cannot be null");
        }
        if (!traderDao.existsById(traderId)) {
            throw new IllegalArgumentException("Trader id " + traderId + "does not exist");
        }
        if (fund <= 0) {
            throw new IllegalArgumentException("Fund amount to be deposited must be greater than 0");
        }

        Account traderAccount = accountDao.findByTraderId(traderId).get();
        traderAccount.setAmount(traderAccount.getAmount() - fund);
        accountDao.updateOne(traderAccount);

        return accountDao.save(traderAccount);
    }
}